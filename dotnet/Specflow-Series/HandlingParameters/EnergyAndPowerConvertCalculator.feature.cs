// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HandlingParameters
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ConvertMetricsForNuclearScienceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EnergyAndPowerConvertCalculator.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            var featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Convert Metrics for Nuclear Science", "\tTo do my nuclear-related job\r\n\tAs a Nuclear Engineer \r\n\tI want to be able to con" +
                    "vert different metrics.", ProgrammingLanguage.CSharp, new string[] {
                        "firefox"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Convert Metrics for Nuclear Science")))
            {
                HandlingParameters.ConvertMetricsForNuclearScienceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Successfully Convert Kilowatt-hours to Newton-meters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Convert Metrics for Nuclear Science")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("firefox")]
        public virtual void SuccessfullyConvertKilowatt_HoursToNewton_Meters()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully Convert Kilowatt-hours to Newton-meters", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.When("I navigate to Metric Conversions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.And("navigate to Energy and power section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("navigate to Kilowatt-hours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("choose conversions to Newton-meters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("type \"30\" kWh", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.Then("assert that 1.080000e+8 Nm are displayed as answer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Successfully Convert Kilowatt-hours to Newton-meters in Fractions format")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Convert Metrics for Nuclear Science")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("firefox")]
        public virtual void SuccessfullyConvertKilowatt_HoursToNewton_MetersInFractionsFormat()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully Convert Kilowatt-hours to Newton-meters in Fractions format", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.When("I navigate to Metric Conversions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.And("navigate to Energy and power section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And("navigate to Kilowatt-hours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.And("choose conversions to Newton-meters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And("type 30 kWh in Fractions format", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.Then("assert that 1079999999⁄64 Nm are displayed as answer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Successfully Convert Seconds to Minutes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Convert Metrics for Nuclear Science")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("firefox")]
        public virtual void SuccessfullyConvertSecondsToMinutes()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully Convert Seconds to Minutes", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.When("I navigate to Seconds to Minutes Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.And("type seconds for 1 day, 1 hour, 1 minute, 1 second", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.Then("assert that 1501 minutes are displayed as answer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Successfully Convert Seconds to Minutes No Minutes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Convert Metrics for Nuclear Science")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("firefox")]
        public virtual void SuccessfullyConvertSecondsToMinutesNoMinutes()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully Convert Seconds to Minutes No Minutes", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.When("I navigate to Seconds to Minutes Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.And("type seconds for 1 day, 1 hour, 1 second", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.Then("assert that 1500 minutes are displayed as answer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void SuccessfullyConvertSecondsToMinutesTable(string seconds, string minutes, string[] exampleTags)
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully Convert Seconds to Minutes Table", exampleTags);
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.When("I navigate to Seconds to Minutes Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.And(string.Format("type seconds for {0}", seconds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.Then(string.Format("assert that {0} minutes are displayed as answer", minutes), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Successfully Convert Seconds to Minutes Table: 1 day, 1 hour, 1 second")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Convert Metrics for Nuclear Science")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("firefox")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1 day, 1 hour, 1 second")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:seconds", "1 day, 1 hour, 1 second")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:minutes", "1500")]
        public virtual void SuccessfullyConvertSecondsToMinutesTable_1Day1Hour1Second()
        {
            this.SuccessfullyConvertSecondsToMinutesTable("1 day, 1 hour, 1 second", "1500", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Successfully Convert Seconds to Minutes Table: 5 days, 3 minutes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Convert Metrics for Nuclear Science")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("firefox")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "5 days, 3 minutes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:seconds", "5 days, 3 minutes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:minutes", "7203")]
        public virtual void SuccessfullyConvertSecondsToMinutesTable_5Days3Minutes()
        {
            this.SuccessfullyConvertSecondsToMinutesTable("5 days, 3 minutes", "7203", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Successfully Convert Seconds to Minutes Table: 4 hours")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Convert Metrics for Nuclear Science")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("firefox")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "4 hours")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:seconds", "4 hours")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:minutes", "240")]
        public virtual void SuccessfullyConvertSecondsToMinutesTable_4Hours()
        {
            this.SuccessfullyConvertSecondsToMinutesTable("4 hours", "240", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Successfully Convert Seconds to Minutes Table: 180 seconds")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Convert Metrics for Nuclear Science")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("firefox")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "180 seconds")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:seconds", "180 seconds")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:minutes", "3")]
        public virtual void SuccessfullyConvertSecondsToMinutesTable_180Seconds()
        {
            this.SuccessfullyConvertSecondsToMinutesTable("180 seconds", "3", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add Amazon Products with Affiliate Codes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Convert Metrics for Nuclear Science")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("firefox")]
        public virtual void AddAmazonProductsWithAffiliateCodes()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Amazon Products with Affiliate Codes", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line hidden
            var table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Url",
                        "AffilicateCode"});
            table1.AddRow(new string[] {
                        "/dp/B00TSUGXKE/ref=ods_gw_d_h1_tab_fd_c3",
                        "affiliate3"});
            table1.AddRow(new string[] {
                        "/dp/B00KC6I06S/ref=fs_ods_fs_tab_al",
                        "affiliate4"});
            table1.AddRow(new string[] {
                        "/dp/B0189XYY0Q/ref=fs_ods_fs_tab_ts",
                        "affiliate5"});
            table1.AddRow(new string[] {
                        "/dp/B018Y22C2Y/ref=fs_ods_fs_tab_fk",
                        "affiliate6"});
#line 46
 testRunner.When("add products", ((string)(null)), table1, "When ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
